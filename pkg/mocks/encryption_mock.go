// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/util/encryption.go

// Package mock_util is a generated GoMock package.
package mock

import (
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockEncryption is a mock of Encryption interface.
type MockEncryption struct {
        ctrl     *gomock.Controller
        recorder *MockEncryptionMockRecorder
}

// MockEncryptionMockRecorder is the mock recorder for MockEncryption.
type MockEncryptionMockRecorder struct {
        mock *MockEncryption
}

// NewMockEncryption creates a new mock instance.
func NewMockEncryption(ctrl *gomock.Controller) *MockEncryption {
        mock := &MockEncryption{ctrl: ctrl}
        mock.recorder = &MockEncryptionMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryption) EXPECT() *MockEncryptionMockRecorder {
        return m.recorder
}

// Decrypt mocks base method.
func (m *MockEncryption) Decrypt(text string) (string, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Decrypt", text)
        ret0, _ := ret[0].(string)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockEncryptionMockRecorder) Decrypt(text interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEncryption)(nil).Decrypt), text)
}

// Encrypt mocks base method.
func (m *MockEncryption) Encrypt(text string) (string, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Encrypt", text)
        ret0, _ := ret[0].(string)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptionMockRecorder) Encrypt(text interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryption)(nil).Encrypt), text)
}