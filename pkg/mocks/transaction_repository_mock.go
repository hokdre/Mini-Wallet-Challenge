// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/transaction_repository.go

// Package mock_internal is a generated GoMock package.
package mock

import (
        context "context"
        sql "database/sql"
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
        internal "github.com/hokdre/mini-ewallet/internal"
        model "github.com/hokdre/mini-ewallet/internal/model"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
        ctrl     *gomock.Controller
        recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
        mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
        mock := &MockTransactionRepository{ctrl: ctrl}
        mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
        return m.recorder
}

// Create mocks base method.
func (m *MockTransactionRepository) Create(ctx context.Context, newTransaction model.Transaction) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Create", ctx, newTransaction)
        ret0, _ := ret[0].(error)
        return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransactionRepositoryMockRecorder) Create(ctx, newTransaction interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionRepository)(nil).Create), ctx, newTransaction)
}

// Get mocks base method.
func (m *MockTransactionRepository) Get(ctx context.Context, filter internal.TransactionFilter) (model.Transaction, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Get", ctx, filter)
        ret0, _ := ret[0].(model.Transaction)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTransactionRepositoryMockRecorder) Get(ctx, filter interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTransactionRepository)(nil).Get), ctx, filter)
}

// List mocks base method.
func (m *MockTransactionRepository) List(ctx context.Context, filter internal.TransactionFilter) ([]model.Transaction, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "List", ctx, filter)
        ret0, _ := ret[0].([]model.Transaction)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTransactionRepositoryMockRecorder) List(ctx, filter interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTransactionRepository)(nil).List), ctx, filter)
}

// UpdateTx mocks base method.
func (m *MockTransactionRepository) UpdateTx(ctx context.Context, tx *sql.Tx, transaction model.Transaction) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateTx", ctx, tx, transaction)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateTx indicates an expected call of UpdateTx.
func (mr *MockTransactionRepositoryMockRecorder) UpdateTx(ctx, tx, transaction interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTx", reflect.TypeOf((*MockTransactionRepository)(nil).UpdateTx), ctx, tx, transaction)
}
