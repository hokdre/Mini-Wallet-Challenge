// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/tx_repository.go

// Package mock_internal is a generated GoMock package.
package mock

import (
        context "context"
        sql "database/sql"
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockTxRepository is a mock of TxRepository interface.
type MockTxRepository struct {
        ctrl     *gomock.Controller
        recorder *MockTxRepositoryMockRecorder
}

// MockTxRepositoryMockRecorder is the mock recorder for MockTxRepository.
type MockTxRepositoryMockRecorder struct {
        mock *MockTxRepository
}

// NewMockTxRepository creates a new mock instance.
func NewMockTxRepository(ctrl *gomock.Controller) *MockTxRepository {
        mock := &MockTxRepository{ctrl: ctrl}
        mock.recorder = &MockTxRepositoryMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxRepository) EXPECT() *MockTxRepositoryMockRecorder {
        return m.recorder
}

// Process mocks base method.
func (m *MockTxRepository) Process(ctx context.Context, f func(context.Context, *sql.Tx) error) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Process", ctx, f)
        ret0, _ := ret[0].(error)
        return ret0
}

// Process indicates an expected call of Process.
func (mr *MockTxRepositoryMockRecorder) Process(ctx, f interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockTxRepository)(nil).Process), ctx, f)
}
