// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/wallet_service.go

// Package mock_internal is a generated GoMock package.
package mock

import (
        context "context"
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
        uuid "github.com/google/uuid"
        model "github.com/hokdre/mini-ewallet/internal/model"
)

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
        ctrl     *gomock.Controller
        recorder *MockWalletServiceMockRecorder
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
        mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
        mock := &MockWalletService{ctrl: ctrl}
        mock.recorder = &MockWalletServiceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
        return m.recorder
}

// Deposit mocks base method.
func (m *MockWalletService) Deposit(ctx context.Context, accountID uuid.UUID, transaction model.Transaction) (model.Transaction, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Deposit", ctx, accountID, transaction)
        ret0, _ := ret[0].(model.Transaction)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockWalletServiceMockRecorder) Deposit(ctx, accountID, transaction interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockWalletService)(nil).Deposit), ctx, accountID, transaction)
}

// Disable mocks base method.
func (m *MockWalletService) Disable(ctx context.Context, accountID uuid.UUID) (model.Wallet, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Disable", ctx, accountID)
        ret0, _ := ret[0].(model.Wallet)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockWalletServiceMockRecorder) Disable(ctx, accountID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockWalletService)(nil).Disable), ctx, accountID)
}

// Enable mocks base method.
func (m *MockWalletService) Enable(ctx context.Context, accountID uuid.UUID) (model.Wallet, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Enable", ctx, accountID)
        ret0, _ := ret[0].(model.Wallet)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Enable indicates an expected call of Enable.
func (mr *MockWalletServiceMockRecorder) Enable(ctx, accountID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockWalletService)(nil).Enable), ctx, accountID)
}

// Get mocks base method.
func (m *MockWalletService) Get(ctx context.Context, accountID uuid.UUID) (model.Wallet, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Get", ctx, accountID)
        ret0, _ := ret[0].(model.Wallet)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWalletServiceMockRecorder) Get(ctx, accountID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWalletService)(nil).Get), ctx, accountID)
}

// GetTransactions mocks base method.
func (m *MockWalletService) GetTransactions(ctx context.Context, accountID uuid.UUID) ([]model.Transaction, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetTransactions", ctx, accountID)
        ret0, _ := ret[0].([]model.Transaction)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockWalletServiceMockRecorder) GetTransactions(ctx, accountID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockWalletService)(nil).GetTransactions), ctx, accountID)
}

// Init mocks base method.
func (m *MockWalletService) Init(ctx context.Context, externalID string) (string, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Init", ctx, externalID)
        ret0, _ := ret[0].(string)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockWalletServiceMockRecorder) Init(ctx, externalID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockWalletService)(nil).Init), ctx, externalID)
}

// Withdrawal mocks base method.
func (m *MockWalletService) Withdrawal(ctx context.Context, accountID uuid.UUID, transaction model.Transaction) (model.Transaction, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Withdrawal", ctx, accountID, transaction)
        ret0, _ := ret[0].(model.Transaction)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Withdrawal indicates an expected call of Withdrawal.
func (mr *MockWalletServiceMockRecorder) Withdrawal(ctx, accountID, transaction interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawal", reflect.TypeOf((*MockWalletService)(nil).Withdrawal), ctx, accountID, transaction)
}